generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(uuid())
  name                   String
  email                  String                @unique
  cpf                    String                @unique
  password               String
  avatar                 String?
  xp                     Int                   @default(0)
  level                  Int                   @default(0)
  deletedAt              DateTime?
  achievements           UserAchievement[]
  preferences            Preference[]
  activitiesCreated      Activity[]            @relation("UserCreatedActivities")
  activitiesParticipated ActivityParticipant[]

  @@map("user")
}

model UserAchievement {
  id            String      @id @default(uuid())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  @@unique([userId, achievementId])
  @@map("user_achievement")
}

model Achievement {
  id        String            @id @default(uuid())
  name      String            @unique
  criterion String
  users     UserAchievement[]

  @@map("achievement")
}

model Preference {
  id     String       @id @default(uuid())
  user   User         @relation(fields: [userId], references: [id])
  userId String
  type   ActivityType @relation(fields: [typeId], references: [id])
  typeId String

  @@map("preference")
}

model ActivityType {
  id          String       @id @default(uuid())
  name        String
  description String
  image       String?
  activities  Activity[]
  Preference  Preference[]

  @@map("acivity_type")
}

model Activity {
  id               String                @id @default(uuid())
  title            String
  description      String
  type             ActivityType          @relation(fields: [typeId], references: [id])
  typeId           String
  confirmationCode String
  image            String?
  scheduledDate    DateTime
  createdAt        DateTime              @default(now())
  deletedAt        DateTime?
  completedAt      DateTime?
  private          Boolean               @default(false)
  creator          User                  @relation(fields: [creatorId], references: [id], name: "UserCreatedActivities")
  creatorId        String
  participants     ActivityParticipant[]
  address          ActivityAddress?

  @@map("activity")
}

model ActivityParticipant {
  id          String    @id @default(uuid())
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  approved    Boolean? 
  approvedAt DateTime?
  confirmedAt DateTime?

  @@map("activity_participant")
}

model ActivityAddress {
  id         String   @id @default(uuid())
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @unique
  latitude   Float
  longitude  Float

  @@map("activity_address")
}
